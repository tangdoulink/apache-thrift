/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2022-01-04")
public class Address implements org.apache.thrift.TBase<Address, Address._Fields>, java.io.Serializable, Cloneable, Comparable<Address> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Address");

  private static final org.apache.thrift.protocol.TField COUTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("coutry", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STREET_FIELD_DESC = new org.apache.thrift.protocol.TField("street", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NO_FIELD_DESC = new org.apache.thrift.protocol.TField("no", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AddressStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AddressTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String coutry; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String province; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String city; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String region; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String street; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String no; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COUTRY((short)1, "coutry"),
    PROVINCE((short)2, "province"),
    CITY((short)3, "city"),
    REGION((short)4, "region"),
    STREET((short)5, "street"),
    NO((short)6, "no");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUTRY
          return COUTRY;
        case 2: // PROVINCE
          return PROVINCE;
        case 3: // CITY
          return CITY;
        case 4: // REGION
          return REGION;
        case 5: // STREET
          return STREET;
        case 6: // NO
          return NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.STREET,_Fields.NO};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUTRY, new org.apache.thrift.meta_data.FieldMetaData("coutry", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STREET, new org.apache.thrift.meta_data.FieldMetaData("street", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NO, new org.apache.thrift.meta_data.FieldMetaData("no", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Address.class, metaDataMap);
  }

  public Address() {
  }

  public Address(
    java.lang.String coutry,
    java.lang.String province,
    java.lang.String city,
    java.lang.String region)
  {
    this();
    this.coutry = coutry;
    this.province = province;
    this.city = city;
    this.region = region;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Address(Address other) {
    if (other.isSetCoutry()) {
      this.coutry = other.coutry;
    }
    if (other.isSetProvince()) {
      this.province = other.province;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetRegion()) {
      this.region = other.region;
    }
    if (other.isSetStreet()) {
      this.street = other.street;
    }
    if (other.isSetNo()) {
      this.no = other.no;
    }
  }

  public Address deepCopy() {
    return new Address(this);
  }

  @Override
  public void clear() {
    this.coutry = null;
    this.province = null;
    this.city = null;
    this.region = null;
    this.street = null;
    this.no = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCoutry() {
    return this.coutry;
  }

  public Address setCoutry(@org.apache.thrift.annotation.Nullable java.lang.String coutry) {
    this.coutry = coutry;
    return this;
  }

  public void unsetCoutry() {
    this.coutry = null;
  }

  /** Returns true if field coutry is set (has been assigned a value) and false otherwise */
  public boolean isSetCoutry() {
    return this.coutry != null;
  }

  public void setCoutryIsSet(boolean value) {
    if (!value) {
      this.coutry = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getProvince() {
    return this.province;
  }

  public Address setProvince(@org.apache.thrift.annotation.Nullable java.lang.String province) {
    this.province = province;
    return this;
  }

  public void unsetProvince() {
    this.province = null;
  }

  /** Returns true if field province is set (has been assigned a value) and false otherwise */
  public boolean isSetProvince() {
    return this.province != null;
  }

  public void setProvinceIsSet(boolean value) {
    if (!value) {
      this.province = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCity() {
    return this.city;
  }

  public Address setCity(@org.apache.thrift.annotation.Nullable java.lang.String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRegion() {
    return this.region;
  }

  public Address setRegion(@org.apache.thrift.annotation.Nullable java.lang.String region) {
    this.region = region;
    return this;
  }

  public void unsetRegion() {
    this.region = null;
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return this.region != null;
  }

  public void setRegionIsSet(boolean value) {
    if (!value) {
      this.region = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStreet() {
    return this.street;
  }

  public Address setStreet(@org.apache.thrift.annotation.Nullable java.lang.String street) {
    this.street = street;
    return this;
  }

  public void unsetStreet() {
    this.street = null;
  }

  /** Returns true if field street is set (has been assigned a value) and false otherwise */
  public boolean isSetStreet() {
    return this.street != null;
  }

  public void setStreetIsSet(boolean value) {
    if (!value) {
      this.street = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNo() {
    return this.no;
  }

  public Address setNo(@org.apache.thrift.annotation.Nullable java.lang.String no) {
    this.no = no;
    return this;
  }

  public void unsetNo() {
    this.no = null;
  }

  /** Returns true if field no is set (has been assigned a value) and false otherwise */
  public boolean isSetNo() {
    return this.no != null;
  }

  public void setNoIsSet(boolean value) {
    if (!value) {
      this.no = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COUTRY:
      if (value == null) {
        unsetCoutry();
      } else {
        setCoutry((java.lang.String)value);
      }
      break;

    case PROVINCE:
      if (value == null) {
        unsetProvince();
      } else {
        setProvince((java.lang.String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((java.lang.String)value);
      }
      break;

    case REGION:
      if (value == null) {
        unsetRegion();
      } else {
        setRegion((java.lang.String)value);
      }
      break;

    case STREET:
      if (value == null) {
        unsetStreet();
      } else {
        setStreet((java.lang.String)value);
      }
      break;

    case NO:
      if (value == null) {
        unsetNo();
      } else {
        setNo((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COUTRY:
      return getCoutry();

    case PROVINCE:
      return getProvince();

    case CITY:
      return getCity();

    case REGION:
      return getRegion();

    case STREET:
      return getStreet();

    case NO:
      return getNo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COUTRY:
      return isSetCoutry();
    case PROVINCE:
      return isSetProvince();
    case CITY:
      return isSetCity();
    case REGION:
      return isSetRegion();
    case STREET:
      return isSetStreet();
    case NO:
      return isSetNo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Address)
      return this.equals((Address)that);
    return false;
  }

  public boolean equals(Address that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_coutry = true && this.isSetCoutry();
    boolean that_present_coutry = true && that.isSetCoutry();
    if (this_present_coutry || that_present_coutry) {
      if (!(this_present_coutry && that_present_coutry))
        return false;
      if (!this.coutry.equals(that.coutry))
        return false;
    }

    boolean this_present_province = true && this.isSetProvince();
    boolean that_present_province = true && that.isSetProvince();
    if (this_present_province || that_present_province) {
      if (!(this_present_province && that_present_province))
        return false;
      if (!this.province.equals(that.province))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (!this.region.equals(that.region))
        return false;
    }

    boolean this_present_street = true && this.isSetStreet();
    boolean that_present_street = true && that.isSetStreet();
    if (this_present_street || that_present_street) {
      if (!(this_present_street && that_present_street))
        return false;
      if (!this.street.equals(that.street))
        return false;
    }

    boolean this_present_no = true && this.isSetNo();
    boolean that_present_no = true && that.isSetNo();
    if (this_present_no || that_present_no) {
      if (!(this_present_no && that_present_no))
        return false;
      if (!this.no.equals(that.no))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCoutry()) ? 131071 : 524287);
    if (isSetCoutry())
      hashCode = hashCode * 8191 + coutry.hashCode();

    hashCode = hashCode * 8191 + ((isSetProvince()) ? 131071 : 524287);
    if (isSetProvince())
      hashCode = hashCode * 8191 + province.hashCode();

    hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
    if (isSetCity())
      hashCode = hashCode * 8191 + city.hashCode();

    hashCode = hashCode * 8191 + ((isSetRegion()) ? 131071 : 524287);
    if (isSetRegion())
      hashCode = hashCode * 8191 + region.hashCode();

    hashCode = hashCode * 8191 + ((isSetStreet()) ? 131071 : 524287);
    if (isSetStreet())
      hashCode = hashCode * 8191 + street.hashCode();

    hashCode = hashCode * 8191 + ((isSetNo()) ? 131071 : 524287);
    if (isSetNo())
      hashCode = hashCode * 8191 + no.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Address other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCoutry(), other.isSetCoutry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoutry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coutry, other.coutry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProvince(), other.isSetProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCity(), other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRegion(), other.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, other.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStreet(), other.isSetStreet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.street, other.street);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNo(), other.isSetNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.no, other.no);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Address(");
    boolean first = true;

    sb.append("coutry:");
    if (this.coutry == null) {
      sb.append("null");
    } else {
      sb.append(this.coutry);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("province:");
    if (this.province == null) {
      sb.append("null");
    } else {
      sb.append(this.province);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("region:");
    if (this.region == null) {
      sb.append("null");
    } else {
      sb.append(this.region);
    }
    first = false;
    if (isSetStreet()) {
      if (!first) sb.append(", ");
      sb.append("street:");
      if (this.street == null) {
        sb.append("null");
      } else {
        sb.append(this.street);
      }
      first = false;
    }
    if (isSetNo()) {
      if (!first) sb.append(", ");
      sb.append("no:");
      if (this.no == null) {
        sb.append("null");
      } else {
        sb.append(this.no);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (coutry == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'coutry' was not present! Struct: " + toString());
    }
    if (province == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'province' was not present! Struct: " + toString());
    }
    if (city == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'city' was not present! Struct: " + toString());
    }
    if (region == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'region' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AddressStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AddressStandardScheme getScheme() {
      return new AddressStandardScheme();
    }
  }

  private static class AddressStandardScheme extends org.apache.thrift.scheme.StandardScheme<Address> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Address struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COUTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coutry = iprot.readString();
              struct.setCoutryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.province = iprot.readString();
              struct.setProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.region = iprot.readString();
              struct.setRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STREET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.street = iprot.readString();
              struct.setStreetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.no = iprot.readString();
              struct.setNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Address struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.coutry != null) {
        oprot.writeFieldBegin(COUTRY_FIELD_DESC);
        oprot.writeString(struct.coutry);
        oprot.writeFieldEnd();
      }
      if (struct.province != null) {
        oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
        oprot.writeString(struct.province);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      if (struct.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(struct.region);
        oprot.writeFieldEnd();
      }
      if (struct.street != null) {
        if (struct.isSetStreet()) {
          oprot.writeFieldBegin(STREET_FIELD_DESC);
          oprot.writeString(struct.street);
          oprot.writeFieldEnd();
        }
      }
      if (struct.no != null) {
        if (struct.isSetNo()) {
          oprot.writeFieldBegin(NO_FIELD_DESC);
          oprot.writeString(struct.no);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AddressTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AddressTupleScheme getScheme() {
      return new AddressTupleScheme();
    }
  }

  private static class AddressTupleScheme extends org.apache.thrift.scheme.TupleScheme<Address> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Address struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.coutry);
      oprot.writeString(struct.province);
      oprot.writeString(struct.city);
      oprot.writeString(struct.region);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStreet()) {
        optionals.set(0);
      }
      if (struct.isSetNo()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetStreet()) {
        oprot.writeString(struct.street);
      }
      if (struct.isSetNo()) {
        oprot.writeString(struct.no);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Address struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.coutry = iprot.readString();
      struct.setCoutryIsSet(true);
      struct.province = iprot.readString();
      struct.setProvinceIsSet(true);
      struct.city = iprot.readString();
      struct.setCityIsSet(true);
      struct.region = iprot.readString();
      struct.setRegionIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.street = iprot.readString();
        struct.setStreetIsSet(true);
      }
      if (incoming.get(1)) {
        struct.no = iprot.readString();
        struct.setNoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

